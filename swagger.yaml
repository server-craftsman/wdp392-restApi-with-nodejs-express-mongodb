swagger: '2.0'
info:
  description: 'HuyIT Bloodline DNA Testing Service Management System API docs'
  version: '1.0.0'
  title: 'Bloodline DNA Testing Service Management System'
  termOfService: 'HuyIT'
  contact:
    email: 'huyit2003@gmail.com'
  license:
    name: 'MIT'
    url: 'https://opensource.org/licenses/MIT'
basePath: '/api'
tags:
- name: 'auth'
  description: 'Authentication APIs'
- name: 'users'
  description: 'User management APIs'
- name: 'services'
  description: 'Service management APIs'

schemes:
- 'https'
- 'http'

# Declare security scheme
securityDefinitions:
  Bearer:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
    description: 'Bearer token for authorization'
    x-tokenName: 'token'
    x-tokenPrefix: 'Bearer '

paths:
  /auth:
    post:
      tags:
      - 'auth'
      summary: 'Login API and get token'
      description: 'Input email and password'
      operationId: "login"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Login for user'
        required: true
        schema: 
          $ref: '#/definitions/LoginDto'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: 'Invalid input'
    get:
      tags:
        - 'auth'
      summary: 'Get current logged-in user'
      description: 'Retrieve information about the current logged-in user'
      operationId: "getCurrentLoginUser"
      produces:
        - 'application/json'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Current logged-in user information'
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: 'Unauthorized - user not logged in'
        '404':
          description: 'User not found'

  /auth/google:
    post:
      tags:
      - 'auth'
      summary: 'Login API and get token By Google'
      description: 'Input google_id'
      operationId: "loginByGoogle"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Login for user via google'
        required: true
        schema: 
          $ref: '#/definitions/LoginGoogleDto'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: 'Invalid input'
          
  /auth/verify-token:
    post:
      tags:
      - 'auth'
      summary: 'Verify Token'
      description: 'Input verifyToken'
      operationId: "verifyToken"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: ''
        required: true
        schema: 
          $ref: '#/definitions/VerifiedTokenDto'
      responses:
        '200':
          description: 'Token verified successfully'
        '400':
          description: 'Invalid input'
          
  /auth/resend-token:
    post:
      tags:
      - 'auth'
      summary: 'Resend Token'
      description: 'Resend verification token to user email'
      operationId: "resendToken"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to send verification token'
        required: true
        schema: 
          $ref: '#/definitions/EmailDto'
      responses:
        '200':
          description: 'Token resent successfully'
        '400':
          description: 'Invalid input'
          
  /auth/forgot-password:
    put:
      tags:
      - 'auth'
      summary: 'Forgot Password'
      description: 'Request a password reset'
      operationId: "forgotPassword"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to send reset password'
        required: true
        schema: 
          $ref: '#/definitions/EmailDto'
      responses:
        '200':
          description: 'Password reset email sent successfully'
        '400':
          description: 'Invalid input'
          
  /auth/logout:
    get:
      tags:
      - 'auth'
      summary: 'Logout'
      description: 'Logout current user session'
      operationId: "logout"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Logout successful'
        '401':
          description: 'Unauthorized - user not logged in'

  # User routes
  /users:
    post:
      tags:
      - 'users'
      summary: 'Register new user'
      description: 'Register a new user account'
      operationId: "registerUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User registration data'
        required: true
        schema: 
          $ref: '#/definitions/RegisterDto'
      responses:
        '201':
          description: 'User registered successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
          
  /users/generate:
    post:
      tags:
      - 'users'
      summary: 'Generate admin user'
      description: 'Generate default admin user'
      operationId: "generateAdminUser"
      produces:
      - 'application/json'
      responses:
        '201':
          description: 'Admin user created successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Error creating admin user'
          
  /users/google:
    post:
      tags:
      - 'users'
      summary: 'Register with Google'
      description: 'Register a new user with Google account'
      operationId: "registerWithGoogle"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Google registration data'
        required: true
        schema: 
          $ref: '#/definitions/LoginGoogleDto'
      responses:
        '201':
          description: 'User registered successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
          
  /users/create:
    post:
      tags:
      - 'users'
      summary: 'Create user (Admin only)'
      description: 'Create a new user (Admin only)'
      operationId: "createUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User data'
        required: true
        schema: 
          $ref: '#/definitions/RegisterDto'
      responses:
        '201':
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/search:
    post:
      tags:
      - 'users'
      summary: 'Search users (Admin only)'
      description: 'Search for users with pagination'
      operationId: "searchUsers"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Search criteria and pagination'
        required: true
        schema: 
          $ref: '#/definitions/SearchPaginationUserDto'
      responses:
        '200':
          description: 'Search results'
          schema:
            $ref: '#/definitions/SearchPaginationResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/{id}:
    get:
      tags:
      - 'users'
      summary: 'Get user by ID'
      description: 'Get user information by ID'
      operationId: "getUserById"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'User information'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid ID'
        '404':
          description: 'User not found'
    put:
      tags:
      - 'users'
      summary: 'Update user'
      description: 'Update user information'
      operationId: "updateUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated user data'
        required: true
        schema: 
          $ref: '#/definitions/UpdateUserDto'
      responses:
        '200':
          description: 'User updated successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
    delete:
      tags:
      - 'users'
      summary: 'Delete user (Admin only)'
      description: 'Delete user by ID (soft delete)'
      operationId: "deleteUser"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'User deleted successfully'
        '400':
          description: 'Invalid ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'User not found'
          
  /users/change-password:
    put:
      tags:
      - 'users'
      summary: 'Change password'
      description: 'Change user password'
      operationId: "changePassword"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Password change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangePasswordDto'
      responses:
        '200':
          description: 'Password changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/change-status:
    put:
      tags:
      - 'users'
      summary: 'Change user status (Admin only)'
      description: 'Enable or disable a user account'
      operationId: "changeUserStatus"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Status change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangeStatusDto'
      responses:
        '200':
          description: 'Status changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/change-role:
    put:
      tags:
      - 'users'
      summary: 'Change user role (Admin only)'
      description: 'Change the role of a user'
      operationId: "changeUserRole"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Role change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangeRoleDto'
      responses:
        '200':
          description: 'Role changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /service/create:
    post:
      tags:
      - 'services'
      summary: 'Create new service (Admin, Manager only)'
      description: 'Create a new service '
      operationId: "createService"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Service information'
        required: true
        schema: 
          $ref: '#/definitions/CreateServiceDto'
      responses:
        '201':
          description: 'Service created successfully'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'

  /service/search:
    get:
      tags:
      - 'services'
      summary: 'Search and filter services (All roles)'
      description: 'Search services with pagination and filtering'
      operationId: "getServices"
      produces:
      - 'application/json'
      parameters:
      - in: 'query'
        name: 'type'
        description: 'Filter by service type (civil, administrative)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'sample_method'
        description: 'Filter by sample method (self_collected, facility_collected, home_collected)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'is_active'
        description: 'Filter by active status'
        required: false
        type: 'boolean'
      - in: 'query'
        name: 'min_price'
        description: 'Minimum price'
        required: false
        type: 'number'
      - in: 'query'
        name: 'max_price'
        description: 'Maximum price'
        required: false
        type: 'number'
      - in: 'query'
        name: 'pageNum'
        description: 'Page number'
        required: false
        type: 'integer'
        default: 1
      - in: 'query'
        name: 'pageSize'
        description: 'Items per page'
        required: false
        type: 'integer'
        default: 10
      - in: 'query'
        name: 'keyword'
        description: 'Search by name or description'
        required: false
        type: 'string'
      - in: 'query'
        name: 'sort_by'
        description: 'Sort field (name, price, created_at, estimated_time)'
        required: false
        type: 'string'
        default: 'created_at'
      - in: 'query'
        name: 'sort_order'
        description: 'Sort order (asc, desc)'
        required: false
        type: 'string'
        default: 'desc'
      - in: 'query'
        name: 'start_date'
        description: 'Filter by creation date (start)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'end_date'
        description: 'Filter by creation date (end)'
        required: false
        type: 'string'
        format: 'date'
      responses:
        '200':
          description: 'Service list with pagination'
          schema:
            $ref: '#/definitions/ServicePaginationResponse'
        '401':
          description: 'Unauthorized'

  /service/{id}:
    get:
      tags:
      - 'services'
      summary: 'Get service by ID (All roles)'
      description: 'Retrieve service details by ID'
      operationId: "getServiceById"
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Service details'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'
          
    put:
      tags:
      - 'services'
      summary: 'Update service (Admin, Manager only)'
      description: 'Update service information'
      operationId: "updateService"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated service information'
        required: true
        schema: 
          $ref: '#/definitions/UpdateServiceDto'
      responses:
        '200':
          description: 'Service updated successfully'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

    delete:
      tags:
      - 'services'
      summary: 'Delete service (Admin, Manager only)'
      description: 'Delete service (soft delete)'
      operationId: "deleteService"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Service deleted successfully'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

  /service/appointments:
    get:
      tags:
      - 'services'
      summary: 'Get services by appointment criteria'
      description: 'Filter services based on related appointments'
      operationId: "getServicesByAppointment"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'query'
        name: 'status'
        description: 'Filter by appointment status'
        required: false
        type: 'string'
      - in: 'query'
        name: 'start_appointment_date'
        description: 'Filter by appointment date (start)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'end_appointment_date'
        description: 'Filter by appointment date (end)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'appointment_type'
        description: 'Filter by appointment type (self, facility, home)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'customer_id'
        description: 'Filter by customer ID'
        required: false
        type: 'string'
      - in: 'query'
        name: 'staff_id'
        description: 'Filter by staff ID'
        required: false
        type: 'string'
      - in: 'query'
        name: 'collection_address'
        description: 'Filter by collection address'
        required: false
        type: 'string'
      - in: 'query'
        name: 'pageNum'
        description: 'Page number'
        required: false
        type: 'integer'
        default: 1
      - in: 'query'
        name: 'pageSize'
        description: 'Items per page'
        required: false
        type: 'integer'
        default: 10
      responses:
        '200':
          description: 'Service list filtered by appointment data'
          schema:
            $ref: '#/definitions/ServicePaginationResponse'
        '401':
          description: 'Unauthorized'

definitions:
  LoginDto:
    type: object
    properties:
      email:
        type: string
        format: email
        description: "User's email address"
        example: "string"
      password:
        type: string
        description: "User's password"
        minLength: 6
        example: "string"
    required:
      - email
      - password
      
  LoginGoogleDto:
    type: object
    properties:
      google_id:
        type: string
        description: "Google ID token"
        example: "string"
    required:
      - google_id
      
  VerifiedTokenDto:
    type: object
    properties:
      token:
        type: string
        description: "Verification token"
        example: "string"
    required:
      - token
      
  EmailDto:
    type: object
    properties:
      email:
        type: string
        format: email
        description: "User's email address"
        example: "string"
    required:
      - email
      
  TokenResponse:
    type: object
    properties:
      token:
        type: string
        description: "JWT authentication token"
        
  UserResponse:
    type: object
    properties:
      _id:
        type: string
        description: "User ID"
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      email:
        type: string
        format: email
        description: "User's email address"
      google_id:
        type: string
        description: "Google ID (if applicable)"
      role:
        type: string
        enum: ["admin", "manager", "staff", "customer"]
        description: "User role"
      status:
        type: boolean
        description: "User account status"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      is_verified:
        type: boolean
        description: "Email verification status"
      created_at:
        type: string
        format: date-time
        description: "Account creation date"
      updated_at:
        type: string
        format: date-time
        description: "Account last update date"
        
  RegisterDto:
    type: object
    properties:
      google_id:
        type: string
        description: "Google ID (optional)"
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      email:
        type: string
        format: email
        description: "User's email address"
      password:
        type: string
        minLength: 6
        description: "User's password"
      role:
        type: string
        enum: ["customer", "manager", "staff", "admin"]
        description: "User role"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      address:
        type: string
        description: "User's address"
      gender:
        type: string
        description: "User's gender"
    required:
      - first_name
      - last_name
      - email
      - password
      - phone_number
      - dob

  UpdateUserDto:
    type: object
    properties:
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      address:
        type: string
        description: "User's address"
      gender:
        type: string
        description: "User's gender"
    required:
      - first_name
      - last_name
      
  ChangePasswordDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      old_password:
        type: string
        description: "Current password"
        minLength: 6
      new_password:
        type: string
        description: "New password"
        minLength: 6
    required:
      - user_id
      - old_password
      - new_password
      
  ChangeStatusDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      status:
        type: boolean
        description: "New status (true=active, false=inactive)"
    required:
      - user_id
      - status
      
  ChangeRoleDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      role:
        type: string
        enum: ["admin", "manager", "staff", "customer"]
        description: "New user role"
    required:
      - user_id
      - role
      
  SearchUserDto:
    type: object
    properties:
      keyword:
        type: string
        description: "Search keyword (email, first name, last name)"
        example: "string"
      role:
        type: string
        enum: ["", "all", "admin", "manager", "staff", "customer"]
        description: "Filter by role"
        example: ""
      is_verified:
        type: boolean
        description: "Filter by verification status"
        example: "true"
      status:
        type: boolean
        description: "Filter by user status"
        example: "true"
      is_deleted:
        type: boolean
        description: "Include deleted users"
        example: "false"
        
  PaginationRequestModel:
    type: object
    properties:
      pageNum:
        type: integer
        minimum: 1
        description: "Page number (starting from 1)"
        default: 1
      pageSize:
        type: integer
        minimum: 1
        description: "Number of items per page"
        default: 10
        
  SearchPaginationUserDto:
    type: object
    properties:
      pageInfo:
        $ref: '#/definitions/PaginationRequestModel'
      searchCondition:
        $ref: '#/definitions/SearchUserDto'
        
  SearchPaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/UserResponse'
      pageInfo:
        type: object
        properties:
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"

  CreateServiceDto:
    type: object
    properties:
      name:
        type: string
        description: "Service name"
        example: "Dân Sự"
      description:
        type: string
        description: "Service description"
        example: "Dịch vụ dân sự"
      price:
        type: number
        description: "Service price"
        example: 1500000
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
        example: "civil"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
        example: "home_collected"
      estimated_time:
        type: number
        description: "Estimated time in hours"
        example: 48
    required:
      - name
      - description
      - price
      - type
      - sample_method
      - estimated_time

  UpdateServiceDto:
    type: object
    properties:
      name:
        type: string
        description: "Service name"
      description:
        type: string
        description: "Service description"
      price:
        type: number
        description: "Service price"
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
      estimated_time:
        type: number
        description: "Estimated time in hours"
    required:
      - name
      - description
      - price
      - type
      - sample_method
      - estimated_time

  ServiceResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Service ID"
      name:
        type: string
        description: "Service name"
      description:
        type: string
        description: "Service description"
      price:
        type: number
        description: "Service price"
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
      estimated_time:
        type: number
        description: "Estimated time in hours"
      is_active:
        type: boolean
        description: "Service status"
      created_at:
        type: string
        format: date-time
        description: "Creation date"
      updated_at:
        type: string
        format: date-time
        description: "Last update date"

  ServicePaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/ServiceResponse'
      pageInfo:
        type: object
        properties:
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"