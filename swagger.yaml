swagger: '2.0'
info:
  description: 'HuyIT Bloodline DNA Testing Service Management System API docs'
  version: '1.0.0'
  title: 'Bloodline DNA Testing Service Management System'
  termOfService: 'HuyIT'
  contact:
    email: 'huyit2003@gmail.com'
  license:
    name: 'MIT'
    url: 'https://opensource.org/licenses/MIT'
basePath: '/api'
tags:
- name: 'auth'
  description: 'Authentication APIs'
- name: 'users'
  description: 'User management APIs'
- name: 'services'
  description: 'Service management APIs'
- name: 'departments'
  description: 'Department management APIs'

schemes:
- 'https'
- 'http'

# Declare security scheme
securityDefinitions:
  Bearer:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
    description: 'Bearer token for authorization'
    x-tokenName: 'token'
    x-tokenPrefix: 'Bearer '

paths:
  /auth:
    post:
      tags:
      - 'auth'
      summary: 'Login API and get token'
      description: 'Input email and password'
      operationId: "login"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Login for user'
        required: true
        schema: 
          $ref: '#/definitions/LoginDto'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: 'Invalid input'
    get:
      tags:
        - 'auth'
      summary: 'Get current logged-in user'
      description: 'Retrieve information about the current logged-in user'
      operationId: "getCurrentLoginUser"
      produces:
        - 'application/json'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Current logged-in user information'
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: 'Unauthorized - user not logged in'
        '404':
          description: 'User not found'

  /auth/google:
    post:
      tags:
      - 'auth'
      summary: 'Login API and get token By Google'
      description: 'Input google_id'
      operationId: "loginByGoogle"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Login for user via google'
        required: true
        schema: 
          $ref: '#/definitions/LoginGoogleDto'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: 'Invalid input'
          
  /auth/verify-token:
    post:
      tags:
      - 'auth'
      summary: 'Verify Token'
      description: 'Input verifyToken'
      operationId: "verifyToken"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: ''
        required: true
        schema: 
          $ref: '#/definitions/VerifiedTokenDto'
      responses:
        '200':
          description: 'Token verified successfully'
        '400':
          description: 'Invalid input'
          
  /auth/resend-token:
    post:
      tags:
      - 'auth'
      summary: 'Resend Token'
      description: 'Resend verification token to user email'
      operationId: "resendToken"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to send verification token'
        required: true
        schema: 
          $ref: '#/definitions/EmailDto'
      responses:
        '200':
          description: 'Token resent successfully'
        '400':
          description: 'Invalid input'
          
  /auth/forgot-password:
    put:
      tags:
      - 'auth'
      summary: 'Forgot Password'
      description: 'Request a password reset'
      operationId: "forgotPassword"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to send reset password'
        required: true
        schema: 
          $ref: '#/definitions/EmailDto'
      responses:
        '200':
          description: 'Password reset email sent successfully'
        '400':
          description: 'Invalid input'
          
  /auth/logout:
    get:
      tags:
      - 'auth'
      summary: 'Logout'
      description: 'Logout current user session'
      operationId: "logout"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'Logout successful'
        '401':
          description: 'Unauthorized - user not logged in'

  # User routes
  /users:
    post:
      tags:
      - 'users'
      summary: 'Register new user'
      description: 'Register a new user account'
      operationId: "registerUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User registration data'
        required: true
        schema: 
          $ref: '#/definitions/RegisterDto'
      responses:
        '201':
          description: 'User registered successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
          
  /users/generate:
    post:
      tags:
      - 'users'
      summary: 'Generate admin user'
      description: 'Generate default admin user'
      operationId: "generateAdminUser"
      produces:
      - 'application/json'
      responses:
        '201':
          description: 'Admin user created successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Error creating admin user'
          
  /users/google:
    post:
      tags:
      - 'users'
      summary: 'Register with Google'
      description: 'Register a new user with Google account'
      operationId: "registerWithGoogle"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Google registration data'
        required: true
        schema: 
          $ref: '#/definitions/LoginGoogleDto'
      responses:
        '201':
          description: 'User registered successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
          
  /users/create:
    post:
      tags:
      - 'users'
      summary: 'Create user (Admin only)'
      description: 'Create a new user (Admin only)'
      operationId: "createUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User data'
        required: true
        schema: 
          $ref: '#/definitions/RegisterDto'
      responses:
        '201':
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/search:
    post:
      tags:
      - 'users'
      summary: 'Search users (Admin only)'
      description: 'Search for users with pagination'
      operationId: "searchUsers"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Search criteria and pagination'
        required: true
        schema: 
          $ref: '#/definitions/SearchPaginationUserDto'
      responses:
        '200':
          description: 'Search results'
          schema:
            $ref: '#/definitions/SearchPaginationResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/{id}:
    get:
      tags:
      - 'users'
      summary: 'Get user by ID'
      description: 'Get user information by ID'
      operationId: "getUserById"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'User information'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid ID'
        '404':
          description: 'User not found'
    put:
      tags:
      - 'users'
      summary: 'Update user'
      description: 'Update user information'
      operationId: "updateUser"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated user data'
        required: true
        schema: 
          $ref: '#/definitions/UpdateUserDto'
      responses:
        '200':
          description: 'User updated successfully'
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
    delete:
      tags:
      - 'users'
      summary: 'Delete user (Admin only)'
      description: 'Delete user by ID (soft delete)'
      operationId: "deleteUser"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'User ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'User deleted successfully'
        '400':
          description: 'Invalid ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'User not found'
          
  /users/change-password:
    put:
      tags:
      - 'users'
      summary: 'Change password'
      description: 'Change user password'
      operationId: "changePassword"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Password change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangePasswordDto'
      responses:
        '200':
          description: 'Password changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/change-status:
    put:
      tags:
      - 'users'
      summary: 'Change user status (Admin only)'
      description: 'Enable or disable a user account'
      operationId: "changeUserStatus"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Status change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangeStatusDto'
      responses:
        '200':
          description: 'Status changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /users/change-role:
    put:
      tags:
      - 'users'
      summary: 'Change user role (Admin only)'
      description: 'Change the role of a user'
      operationId: "changeUserRole"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Role change data'
        required: true
        schema: 
          $ref: '#/definitions/ChangeRoleDto'
      responses:
        '200':
          description: 'Role changed successfully'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
          
  /service/create:
    post:
      tags:
      - 'services'
      summary: 'Create new service (Admin, Manager only)'
      description: 'Create a new service '
      operationId: "createService"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Service information'
        required: true
        schema: 
          $ref: '#/definitions/CreateServiceDto'
      responses:
        '201':
          description: 'Service created successfully'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'

  /service/search:
    get:
      tags:
      - 'services'
      summary: 'Search and filter services (All roles)'
      description: 'Search services with pagination and filtering'
      operationId: "getServices"
      produces:
      - 'application/json'
      parameters:
      - in: 'query'
        name: 'type'
        description: 'Filter by service type (civil, administrative)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'sample_method'
        description: 'Filter by sample method (self_collected, facility_collected, home_collected)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'is_active'
        description: 'Filter by active status'
        required: false
        type: 'boolean'
      - in: 'query'
        name: 'min_price'
        description: 'Minimum price'
        required: false
        type: 'number'
      - in: 'query'
        name: 'max_price'
        description: 'Maximum price'
        required: false
        type: 'number'
      - in: 'query'
        name: 'pageNum'
        description: 'Page number'
        required: false
        type: 'integer'
        default: 1
      - in: 'query'
        name: 'pageSize'
        description: 'Items per page'
        required: false
        type: 'integer'
        default: 10
      - in: 'query'
        name: 'keyword'
        description: 'Search by name or description'
        required: false
        type: 'string'
      - in: 'query'
        name: 'sort_by'
        description: 'Sort field (name, price, created_at, estimated_time)'
        required: false
        type: 'string'
        default: 'created_at'
      - in: 'query'
        name: 'sort_order'
        description: 'Sort order (asc, desc)'
        required: false
        type: 'string'
        default: 'desc'
      - in: 'query'
        name: 'start_date'
        description: 'Filter by creation date (start)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'end_date'
        description: 'Filter by creation date (end)'
        required: false
        type: 'string'
        format: 'date'
      responses:
        '200':
          description: 'Service list with pagination'
          schema:
            $ref: '#/definitions/ServicePaginationResponse'
        '401':
          description: 'Unauthorized'

  /service/{id}:
    get:
      tags:
      - 'services'
      summary: 'Get service by ID (All roles)'
      description: 'Retrieve service details by ID'
      operationId: "getServiceById"
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Service details'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'
          
    put:
      tags:
      - 'services'
      summary: 'Update service (Admin, Manager only)'
      description: 'Update service information'
      operationId: "updateService"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated service information'
        required: true
        schema: 
          $ref: '#/definitions/UpdateServiceDto'
      responses:
        '200':
          description: 'Service updated successfully'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

    delete:
      tags:
      - 'services'
      summary: 'Delete service (Admin, Manager only)'
      description: 'Delete service (soft delete)'
      operationId: "deleteService"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Service deleted successfully'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

  /service/appointments:
    get:
      tags:
      - 'services'
      summary: 'Get services by appointment criteria (Admin, Manager, Staff only)'
      description: 'Filter services based on related appointments'
      operationId: "getServicesByAppointment"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'query'
        name: 'status'
        description: 'Filter by appointment status'
        required: false
        type: 'string'
      - in: 'query'
        name: 'start_appointment_date'
        description: 'Filter by appointment date (start)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'end_appointment_date'
        description: 'Filter by appointment date (end)'
        required: false
        type: 'string'
        format: 'date'
      - in: 'query'
        name: 'appointment_type'
        description: 'Filter by appointment type (self, facility, home)'
        required: false
        type: 'string'
      - in: 'query'
        name: 'customer_id'
        description: 'Filter by customer ID'
        required: false
        type: 'string'
      - in: 'query'
        name: 'staff_id'
        description: 'Filter by staff ID'
        required: false
        type: 'string'
      - in: 'query'
        name: 'collection_address'
        description: 'Filter by collection address'
        required: false
        type: 'string'
      - in: 'query'
        name: 'pageNum'
        description: 'Page number'
        required: false
        type: 'integer'
        default: 1
      - in: 'query'
        name: 'pageSize'
        description: 'Items per page'
        required: false
        type: 'integer'
        default: 10
      responses:
        '200':
          description: 'Service list filtered by appointment data'
          schema:
            $ref: '#/definitions/ServicePaginationResponse'
        '401':
          description: 'Unauthorized'

  /department/create:
    post:
      tags:
      - 'departments'
      summary: 'Create new department (Admin only)'
      description: 'Create a new department with manager assignment'
      operationId: "createDepartment"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Department information'
        required: true
        schema: 
          $ref: '#/definitions/CreateDepartmentDto'
      responses:
        '201':
          description: 'Department created successfully'
          schema:
            $ref: '#/definitions/DepartmentResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Department with this name already exists'

  /department/search:
    get:
      tags:
      - 'departments'
      summary: 'Search and filter departments (Admin, Manager, Laboratory Technician, Staff)'
      description: 'Search departments with pagination and filtering'
      operationId: "getDepartments"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'query'
        name: 'pageNum'
        description: 'Page number'
        required: false
        type: 'integer'
        default: 1
      - in: 'query'
        name: 'pageSize'
        description: 'Items per page'
        required: false
        type: 'integer'
        default: 10
      - in: 'query'
        name: 'keyword'
        description: 'Search by name or description'
        required: false
        type: 'string'
      - in: 'query'
        name: 'sort_by'
        description: 'Sort field (name, created_at, updated_at)'
        required: false
        type: 'string'
        default: 'created_at'
      - in: 'query'
        name: 'sort_order'
        description: 'Sort order (asc, desc)'
        required: false
        type: 'string'
        default: 'desc'
      - in: 'query'
        name: 'is_deleted'
        description: 'Filter by deletion status'
        required: false
        type: 'boolean'
        default: false
      - in: 'query'
        name: 'is_active'
        description: 'Filter by active status'
        required: false
        type: 'boolean'
      responses:
        '200':
          description: 'Department list with pagination'
          schema:
            $ref: '#/definitions/DepartmentPaginationResponse'
        '401':
          description: 'Unauthorized'

  /department/manager/{managerId}:
    get:
      tags:
      - 'departments'
      summary: 'Get departments by manager ID (Admin, Manager)'
      description: 'Retrieve departments managed by a specific manager'
      operationId: "getManagerDepartments"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'managerId'
        description: 'Manager ID'
        required: true
        type: 'string'
      - in: 'query'
        name: 'is_deleted'
        description: 'Filter by deletion status'
        required: false
        type: 'boolean'
        default: false
      responses:
        '200':
          description: 'List of departments managed by the manager'
          schema:
            type: 'object'
            properties:
              departments:
                type: 'array'
                items:
                  $ref: '#/definitions/DepartmentResponse'
              count:
                type: 'integer'
                description: 'Number of departments'
        '400':
          description: 'Invalid manager ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Manager not found'

  /department/count:
    get:
      tags:
      - 'departments'
      summary: 'Count departments (Admin, Manager)'
      description: 'Count total number of departments in the system'
      operationId: "countDepartments"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'query'
        name: 'is_deleted'
        description: 'Filter by deletion status'
        required: false
        type: 'boolean'
        default: false
      responses:
        '200':
          description: 'Count of departments'
          schema:
            type: 'object'
            properties:
              totalDepartments:
                type: 'integer'
                description: 'Total number of departments'
        '401':
          description: 'Unauthorized'

  /department/{id}:
    get:
      tags:
      - 'departments'
      summary: 'Get department by ID (Admin, Manager, Laboratory Technician, Staff)'
      description: 'Retrieve department details by ID'
      operationId: "getDepartmentById"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Department ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Department details'
          schema:
            $ref: '#/definitions/DepartmentResponse'
        '400':
          description: 'Invalid department ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'
          
    put:
      tags:
      - 'departments'
      summary: 'Update department (Admin, Manager)'
      description: 'Update department information'
      operationId: "updateDepartment"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Department ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated department information'
        required: true
        schema: 
          $ref: '#/definitions/UpdateDepartmentDto'
      responses:
        '200':
          description: 'Department updated successfully'
          schema:
            $ref: '#/definitions/DepartmentResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'
        '409':
          description: 'Department with this name already exists'

    delete:
      tags:
      - 'departments'
      summary: 'Delete department (Admin only)'
      description: 'Delete department (soft delete)'
      operationId: "deleteDepartment"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Department ID'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Department deleted successfully'
        '400':
          description: 'Invalid department ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'

  # Additional service endpoints (not already in your swagger.yaml)
  /service/statistics:
    get:
      tags:
      - 'services'
      summary: 'Get service statistics (Admin, Manager)'
      description: 'Count services grouped by type, status, and sample method'
      operationId: "countServicesByType"
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'query'
        name: 'is_active'
        description: 'Filter by active status'
        required: false
        type: 'boolean'
      - in: 'query'
        name: 'keyword'
        description: 'Search by name or description'
        required: false
        type: 'string'
      responses:
        '200':
          description: 'Service statistics'
          schema:
            type: 'object'
            properties:
              total:
                type: 'integer'
                description: 'Total number of services'
              byType:
                type: 'object'
                description: 'Services counted by type'
                properties:
                  civil:
                    type: 'integer'
                  administrative:
                    type: 'integer'
              byStatus:
                type: 'object'
                description: 'Services counted by status'
                properties:
                  active:
                    type: 'integer'
                  inactive:
                    type: 'integer'
              bySampleMethod:
                type: 'object'
                description: 'Services counted by sample method'
                properties:
                  self_collected:
                    type: 'integer'
                  facility_collected:
                    type: 'integer'
                  home_collected:
                    type: 'integer'
        '401':
          description: 'Unauthorized'

  /service/{id}/status:
    patch:
      tags:
      - 'services'
      summary: 'Change service status (Admin, Manager)'
      description: 'Activate or deactivate a service'
      operationId: "changeServiceStatus"
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      security:
        - Bearer: []
      parameters:
      - in: 'path'
        name: 'id'
        description: 'Service ID'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Status change data'
        required: true
        schema:
          type: 'object'
          properties:
            is_active:
              type: 'boolean'
              description: 'New active status'
          required:
            - is_active
      responses:
        '200':
          description: 'Service status changed successfully'
          schema:
            $ref: '#/definitions/ServiceResponse'
        '400':
          description: 'Invalid input or service is deleted'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

  # Staff Profile APIs
  /staff-profile/create:
    post:
      tags:
        - 'staff_profiles'
      summary: 'Create a new staff profile (Admin, Manager only)'
      description: 'Create a new staff profile with user and department association'
      operationId: 'createStaffProfile'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Staff profile data'
          required: true
          schema:
            $ref: '#/definitions/CreateStaffProfileDto'
      responses:
        '201':
          description: 'Staff profile created successfully'
          schema:
            $ref: '#/definitions/StaffProfileResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'User already has a staff profile'

  /staff-profile/search:
    get:
      tags:
        - 'staff_profiles'
      summary: 'Search staff profiles (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Search for staff profiles with pagination and filtering'
      operationId: 'getStaffProfiles'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'query'
          name: 'pageNum'
          description: 'Page number'
          required: false
          type: 'integer'
          default: 1
        - in: 'query'
          name: 'pageSize'
          description: 'Items per page'
          required: false
          type: 'integer'
          default: 10
        - in: 'query'
          name: 'department_id'
          description: 'Filter by department ID'
          required: false
          type: 'string'
        - in: 'query'
          name: 'status'
          description: 'Filter by staff status'
          required: false
          type: 'string'
        - in: 'query'
          name: 'keyword'
          description: 'Search by employee ID or job title'
          required: false
          type: 'string'
        - in: 'query'
          name: 'hire_date_from'
          description: 'Filter by hire date (start)'
          required: false
          type: 'string'
          format: 'date'
        - in: 'query'
          name: 'hire_date_to'
          description: 'Filter by hire date (end)'
          required: false
          type: 'string'
          format: 'date'
      responses:
        '200':
          description: 'Staff profile list with pagination'
          schema:
            $ref: '#/definitions/StaffProfilePaginationResponse'
        '401':
          description: 'Unauthorized'

  /staff-profile/department/{id}:
    get:
      tags:
        - 'staff_profiles'
      summary: 'Get staff profiles by department ID (Admin, Manager only)'
      description: 'Retrieve staff profiles associated with a specific department'
      operationId: 'getStaffProfilesByDepartment'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Department ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'List of staff profiles in the department'
          schema:
            $ref: '#/definitions/StaffProfilePaginationResponse'
        '400':
          description: 'Invalid department ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'

  /staff-profile/{id}:
    get:
      tags:
        - 'staff_profiles'
      summary: 'Get staff profile by ID (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Retrieve staff profile details by ID'
      operationId: 'getStaffProfileById'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Staff profile ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Staff profile details'
          schema:
            $ref: '#/definitions/StaffProfileResponse'
        '400':
          description: 'Invalid staff profile ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Staff profile not found'
    put:
      tags:
        - 'staff_profiles'
      summary: 'Update staff profile (Admin, Manager only)'
      description: 'Update staff profile information'
      operationId: 'updateStaffProfile'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Staff profile ID'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated staff profile data'
          required: true
          schema:
            $ref: '#/definitions/UpdateStaffProfileDto'
      responses:
        '200':
          description: 'Staff profile updated successfully'
          schema:
            $ref: '#/definitions/StaffProfileResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Staff profile not found'

  /staff-profile/{id}/status:
    put:
      tags:
        - 'staff_profiles'
      summary: 'Change staff status (Admin, Manager only)'
      description: 'Change the status of a staff profile'
      operationId: 'changeStaffStatus'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Staff profile ID'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Status change data'
          required: true
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
                description: 'New status'
                enum: ['active', 'on_leave', 'terminated']
      responses:
        '200':
          description: 'Staff status changed successfully'
          schema:
            $ref: '#/definitions/StaffProfileResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Staff profile not found'

  # Slot APIs
  /slot/create:
    post:
      tags:
        - 'slots'
      summary: 'Create a new slot (Admin, Manager only)'
      description: 'Create a new slot for staff profiles'
      operationId: 'createSlot'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Slot data'
          required: true
          schema:
            $ref: '#/definitions/CreateSlotDto'
      responses:
        '201':
          description: 'Slot created successfully'
          schema:
            $ref: '#/definitions/SlotResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'

  /slot/search:
    get:
      tags:
        - 'slots'
      summary: 'Search slots with filters (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Search for slots with pagination and filtering'
      operationId: 'getSlots'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'query'
          name: 'pageNum'
          description: 'Page number'
          required: false
          type: 'integer'
          default: 1
        - in: 'query'
          name: 'pageSize'
          description: 'Items per page'
          required: false
          type: 'integer'
          default: 10
        - in: 'query'
          name: 'staff_profile_ids'
          description: 'Filter by staff profile IDs'
          required: false
          type: 'string'
        - in: 'query'
          name: 'department_id'
          description: 'Filter by department ID'
          required: false
          type: 'string'
        - in: 'query'
          name: 'status'
          description: 'Filter by slot status'
          required: false
          type: 'string'
        - in: 'query'
          name: 'date_from'
          description: 'Filter by start date'
          required: false
          type: 'string'
          format: 'date'
        - in: 'query'
          name: 'date_to'
          description: 'Filter by end date'
          required: false
          type: 'string'
          format: 'date'
      responses:
        '200':
          description: 'Slot list with pagination'
          schema:
            $ref: '#/definitions/SlotPaginationResponse'
        '401':
          description: 'Unauthorized'

  /slot/{id}:
    get:
      tags:
        - 'slots'
      summary: 'Get slot by ID (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Retrieve slot details by ID'
      operationId: 'getSlotById'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Slot ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Slot details'
          schema:
            $ref: '#/definitions/SlotResponse'
        '400':
          description: 'Invalid slot ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Slot not found'
    put:
      tags:
        - 'slots'
      summary: 'Update slot (Admin, Manager only)'
      description: 'Update slot information'
      operationId: 'updateSlot'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Slot ID'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated slot data'
          required: true
          schema:
            $ref: '#/definitions/UpdateSlotDto'
      responses:
        '200':
          description: 'Slot updated successfully'
          schema:
            $ref: '#/definitions/SlotResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Slot not found'

  /slot/{id}/status:
    patch:
      tags:
        - 'slots'
      summary: 'Change slot status (Admin, Manager only)'
      description: 'Change the status of a slot'
      operationId: 'changeSlotStatus'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Slot ID'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Status change data'
          required: true
          schema:
            type: 'object'
            properties:
              status:
                type: 'string'
                description: 'New status'
                enum: ['available', 'booked', 'unavailable']
      responses:
        '200':
          description: 'Slot status changed successfully'
          schema:
            $ref: '#/definitions/SlotResponse'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Slot not found'

  /slot/staff/{staffProfileId}:
    get:
      tags:
        - 'slots'
      summary: 'Get slots by staff profile ID (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Retrieve slots associated with a specific staff profile'
      operationId: 'getSlotsByStaff'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'staffProfileId'
          description: 'Staff profile ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'List of slots for the staff profile'
          schema:
            $ref: '#/definitions/SlotPaginationResponse'
        '400':
          description: 'Invalid staff profile ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Staff profile not found'

  /slot/department/{departmentId}:
    get:
      tags:
        - 'slots'
      summary: 'Get slots by department ID (Admin, Manager only)'
      description: 'Retrieve slots associated with a specific department'
      operationId: 'getSlotsByDepartment'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'departmentId'
          description: 'Department ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'List of slots for the department'
          schema:
            $ref: '#/definitions/SlotPaginationResponse'
        '400':
          description: 'Invalid department ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'

  /slot/service/{serviceId}:
    get:
      tags:
        - 'slots'
      summary: 'Get slots by service ID (Admin, Manager, Laboratory Technician, Staff only)'
      description: 'Retrieve slots associated with a specific service'
      operationId: 'getSlotsByService'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'serviceId'
          description: 'Service ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'List of slots for the service'
          schema:
            $ref: '#/definitions/SlotPaginationResponse'
        '400':
          description: 'Invalid service ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Service not found'

  /department/{departmentId}/statistics:
    get:
      tags:
        - 'departments'
      summary: 'Get department capacity statistics (Admin, Manager only)'
      description: 'Retrieve capacity statistics for a department, including staff count, slot count, and booking rate'
      operationId: 'getDepartmentCapacity'
      produces:
        - 'application/json'
      security:
        - Bearer: []
      parameters:
        - in: 'path'
          name: 'departmentId'
          description: 'Department ID'
          required: true
          type: 'string'
        - in: 'query'
          name: 'date_from'
          description: 'Filter by start date'
          required: false
          type: 'string'
          format: 'date'
        - in: 'query'
          name: 'date_to'
          description: 'Filter by end date'
          required: false
          type: 'string'
          format: 'date'
      responses:
        '200':
          description: 'Department capacity statistics'
          schema:
            type: 'object'
            properties:
              totalStaff:
                type: 'integer'
                description: 'Total number of staff'
              totalSlots:
                type: 'integer'
                description: 'Total number of slots'
              bookedSlots:
                type: 'integer'
                description: 'Number of booked slots'
              bookingRate:
                type: 'number'
                format: 'float'
                description: 'Booking rate percentage'
        '400':
          description: 'Invalid department ID'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Department not found'

  /service/{id}/child:
    get:
      tags:
        - services
      summary: 'Get child services by parent service ID'
      description: 'Retrieve all services that have the given service as their parent'
      operationId: "getChildServices"
      produces:
        - 'application/json'
      parameters:
        - in: 'path'
          name: 'id'
          description: 'Parent service ID'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'List of child services'
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceResponse'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'Parent service not found'


definitions:
  LoginDto:
    type: object
    properties:
      email:
        type: string
        format: email
        description: "User's email address"
        example: "string"
      password:
        type: string
        description: "User's password"
        minLength: 6
        example: "string"
    required:
      - email
      - password
      
  LoginGoogleDto:
    type: object
    properties:
      google_id:
        type: string
        description: "Google ID token"
        example: "string"
    required:
      - google_id
      
  VerifiedTokenDto:
    type: object
    properties:
      token:
        type: string
        description: "Verification token"
        example: "string"
    required:
      - token
      
  EmailDto:
    type: object
    properties:
      email:
        type: string
        format: email
        description: "User's email address"
        example: "string"
    required:
      - email
      
  TokenResponse:
    type: object
    properties:
      token:
        type: string
        description: "JWT authentication token"
        
  UserResponse:
    type: object
    properties:
      _id:
        type: string
        description: "User ID"
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      email:
        type: string
        format: email
        description: "User's email address"
      google_id:
        type: string
        description: "Google ID (if applicable)"
      role:
        type: string
        enum: ["admin", "manager", "staff", "customer"]
        description: "User role"
      status:
        type: boolean
        description: "User account status"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      is_verified:
        type: boolean
        description: "Email verification status"
      created_at:
        type: string
        format: date-time
        description: "Account creation date"
      updated_at:
        type: string
        format: date-time
        description: "Account last update date"
        
  RegisterDto:
    type: object
    properties:
      google_id:
        type: string
        description: "Google ID (optional)"
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      email:
        type: string
        format: email
        description: "User's email address"
      password:
        type: string
        minLength: 6
        description: "User's password"
      role:
        type: string
        enum: ["customer", "manager", "staff", "admin"]
        description: "User role"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      address:
        type: string
        description: "User's address"
      gender:
        type: string
        description: "User's gender"
    required:
      - first_name
      - last_name
      - email
      - password
      - phone_number
      - dob

  UpdateUserDto:
    type: object
    properties:
      first_name:
        type: string
        description: "User's first name"
      last_name:
        type: string
        description: "User's last name"
      phone_number:
        type: string
        description: "User's phone number"
      avatar_url:
        type: string
        description: "URL to user's avatar"
      dob:
        type: string
        format: date
        description: "Date of birth"
      address:
        type: string
        description: "User's address"
      gender:
        type: string
        description: "User's gender"
    required:
      - first_name
      - last_name
      
  ChangePasswordDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      old_password:
        type: string
        description: "Current password"
        minLength: 6
      new_password:
        type: string
        description: "New password"
        minLength: 6
    required:
      - user_id
      - old_password
      - new_password
      
  ChangeStatusDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      status:
        type: boolean
        description: "New status (true=active, false=inactive)"
    required:
      - user_id
      - status
      
  ChangeRoleDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      role:
        type: string
        enum: ["admin", "manager", "staff", "customer"]
        description: "New user role"
    required:
      - user_id
      - role
      
  SearchUserDto:
    type: object
    properties:
      keyword:
        type: string
        description: "Search keyword (email, first name, last name)"
        example: "string"
      role:
        type: string
        enum: ["", "all", "admin", "manager", "staff", "customer"]
        description: "Filter by role"
        example: ""
      is_verified:
        type: boolean
        description: "Filter by verification status"
        example: "true"
      status:
        type: boolean
        description: "Filter by user status"
        example: "true"
      is_deleted:
        type: boolean
        description: "Include deleted users"
        example: "false"
        
  PaginationRequestModel:
    type: object
    properties:
      pageNum:
        type: integer
        minimum: 1
        description: "Page number (starting from 1)"
        default: 1
      pageSize:
        type: integer
        minimum: 1
        description: "Number of items per page"
        default: 10
        
  SearchPaginationUserDto:
    type: object
    properties:
      pageInfo:
        $ref: '#/definitions/PaginationRequestModel'
      searchCondition:
        $ref: '#/definitions/SearchUserDto'
        
  SearchPaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/UserResponse'
      pageInfo:
        type: object
        properties:
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"

  CreateServiceDto:
    type: object
    properties:
      name:
        type: string
        description: "Service name"
      description:
        type: string
        description: "Service description"
      parent_service_id:
        type: string
        description: "Parent service ID (optional)"
      price:
        type: number
        description: "Service price"
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
      estimated_time:
        type: number
        description: "Estimated time in hours"
    required:
      - name
      - description
      - price
      - type
      - sample_method
      - estimated_time

  UpdateServiceDto:
    type: object
    properties:
      name:
        type: string
        description: "Service name"
      description:
        type: string
        description: "Service description"
      parent_service_id:
        type: string
        description: "Parent service ID (optional)"
      price:
        type: number
        description: "Service price"
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
      estimated_time:
        type: number
        description: "Estimated time in hours"
    required:
      - name
      - description
      - price
      - type
      - sample_method
      - estimated_time

  ServiceResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Service ID"
      name:
        type: string
        description: "Service name"
      description:
        type: string
        description: "Service description"
      parent_service_id:
        type: string
        description: "Parent service ID (if any)"
      price:
        type: number
        description: "Service price"
      type:
        type: string
        enum: ["civil", "administrative"]
        description: "Service type"
      sample_method:
        type: string
        enum: ["self_collected", "facility_collected", "home_collected"]
        description: "Sample collection method"
      estimated_time:
        type: number
        description: "Estimated time in hours"
      is_active:
        type: boolean
        description: "Service status"
      is_deleted:
        type: boolean
        description: "Service deletion status"
      created_at:
        type: string
        format: date-time
        description: "Creation date"
      updated_at:
        type: string
        format: date-time
        description: "Last update date"

  ServicePaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/ServiceResponse'
      pageInfo:
        type: object
        properties:
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"

  CreateDepartmentDto:
    type: object
    properties:
      name:
        type: string
        description: "Department name"
        example: "Cardiology Department"
      description:
        type: string
        description: "Department description"
        example: "Department for heart-related services"
      manager_id:
        type: string
        description: "Manager ID (must be a user with MANAGER role)"
        example: "60d0fe4f5311236168a109ca"
    required:
      - name
      - description
      - manager_id

  UpdateDepartmentDto:
    type: object
    properties:
      name:
        type: string
        description: "Department name"
        example: "Cardiology Department"
      description:
        type: string
        description: "Department description"
        example: "Department for heart-related services"
      manager_id:
        type: string
        description: "Manager ID (must be a user with MANAGER role)"
        example: "60d0fe4f5311236168a109ca"
    required:
      - name
      - description
      - manager_id

  DepartmentResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Department ID"
      name:
        type: string
        description: "Department name"
      description:
        type: string
        description: "Department description"
      manager_id:
        type: object
        description: "Manager information"
        properties:
          _id:
            type: string
            description: "Manager ID"
          first_name:
            type: string
            description: "Manager's first name"
          last_name:
            type: string
            description: "Manager's last name"
          email:
            type: string
            description: "Manager's email"
      is_deleted:
        type: boolean
        description: "Deletion status"
      created_at:
        type: string
        format: date-time
        description: "Creation date"
      updated_at:
        type: string
        format: date-time
        description: "Last update date"

  DepartmentPaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/DepartmentResponse'
      pageInfo:
        type: object
        properties:
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"

  CreateStaffProfileDto:
    type: object
    properties:
      user_id:
        type: string
        description: "User ID"
      department_id:
        type: string
        description: "Department ID"
      job_title:
        type: string
        description: "Job title"
      hire_date:
        type: string
        format: date
        description: "Hire date"
      salary:
        type: number
        description: "Salary"
      qualifications:
        type: array
        items:
          $ref: '#/definitions/Qualification'
    required:
      - user_id
      - department_id
      - job_title
      - hire_date
      - salary

  UpdateStaffProfileDto:
    type: object
    properties:
      department_id:
        type: string
        description: "Department ID"
      job_title:
        type: string
        description: "Job title"
      hire_date:
        type: string
        format: date
        description: "Hire date"
      salary:
        type: number
        description: "Salary"
      qualifications:
        type: array
        items:
          $ref: '#/definitions/Qualification'
    required:
      - department_id
      - job_title
      - hire_date
      - salary

  StaffProfileResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Staff profile ID"
      user_id:
        type: string
        description: "User ID"
      department_id:
        type: string
        description: "Department ID"
      job_title:
        type: string
        description: "Job title"
      hire_date:
        type: string
        format: date
        description: "Hire date"
      employee_id:
        type: string
        description: "Employee ID"
      salary:
        type: number
        description: "Salary"
      status:
        type: string
        description: "Status"
      qualifications:
        type: array
        items:
          $ref: '#/definitions/Qualification'
      created_at:
        type: string
        format: date-time
        description: "Creation date"
      updated_at:
        type: string
        format: date-time
        description: "Last update date"

  StaffProfilePaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/StaffProfileResponse'
      pageInfo:
        type: object
        properties:
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"

  Qualification:
    type: object
    properties:
      name:
        type: string
        description: "Qualification name"
      institution:
        type: string
        description: "Institution name"
      issue_date:
        type: string
        format: date
        description: "Issue date"
      expiry_date:
        type: string
        format: date
        description: "Expiry date"
      description:
        type: string
        description: "Description"

  CreateSlotDto:
    type: object
    properties:
      staff_profile_ids:
        type: array
        items:
          type: string
        description: "Array of staff profile IDs"
      service_id:
        type: string
        description: "Service ID"
      start_time:
        type: string
        format: date-time
        description: "Start time"
      end_time:
        type: string
        format: date-time
        description: "End time"
      appointment_limit:
        type: integer
        description: "Appointment limit"
      pattern:
        type: string
        description: "Slot pattern"
        enum: ["daily", "weekly", "monthly"]
      days_of_week:
        type: array
        items:
          type: integer
        description: "Days of the week"
    required:
      - staff_profile_ids
      - service_id
      - start_time
      - end_time
      - appointment_limit

  UpdateSlotDto:
    type: object
    properties:
      staff_profile_ids:
        type: array
        items:
          type: string
        description: "Array of staff profile IDs"
      service_id:
        type: string
        description: "Service ID"
      start_time:
        type: string
        format: date-time
        description: "Start time"
      end_time:
        type: string
        format: date-time
        description: "End time"
      appointment_limit:
        type: integer
        description: "Appointment limit"
      pattern:
        type: string
        description: "Slot pattern"
        enum: ["daily", "weekly", "monthly"]
      days_of_week:
        type: array
        items:
          type: integer
        description: "Days of the week"
      status:
        type: string
        description: "Slot status"
        enum: ["available", "booked", "unavailable"]
    required:
      - staff_profile_ids
      - service_id
      - start_time
      - end_time
      - appointment_limit

  SlotResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Slot ID"
      staff_profile_ids:
        type: array
        items:
          type: string
        description: "Array of staff profile IDs"
      service_id:
        type: string
        description: "Service ID"
      start_time:
        type: string
        format: date-time
        description: "Start time"
      end_time:
        type: string
        format: date-time
        description: "End time"
      appointment_limit:
        type: integer
        description: "Appointment limit"
      pattern:
        type: string
        description: "Slot pattern"
      days_of_week:
        type: array
        items:
          type: integer
        description: "Days of the week"
      status:
        type: string
        description: "Slot status"
      created_at:
        type: string
        format: date-time
        description: "Creation date"
      updated_at:
        type: string
        format: date-time
        description: "Last update date"

  SlotPaginationResponse:
    type: object
    properties:
      pageData:
        type: array
        items:
          $ref: '#/definitions/SlotResponse'
      pageInfo:
        type: object
        properties:
          totalItems:
            type: integer
            description: "Total number of items"
          totalPages:
            type: integer
            description: "Total number of pages"
          pageNum:
            type: integer
            description: "Current page number"
          pageSize:
            type: integer
            description: "Number of items per page"